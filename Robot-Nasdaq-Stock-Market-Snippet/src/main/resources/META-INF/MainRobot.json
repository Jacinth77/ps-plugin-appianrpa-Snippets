{"id":"MainRobot","robotType":"ROBOT","mainClass":"com.appian.robot.demo.nasdaq.robot.MainRobot","actions":["init","assignQueue","updateItemQueue","openBrowser","findCompany","getData","closeQueue","startApplication","newCompany","fillFields","clickButtons","end"],"conditionalActions":["startUp","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"init","implementation":"/**\n\t * Action 'Init'.\n\t * <p>\n\t * Initializes Jidoka modules.\n\t * \n\t * @throws JidokaException if the input file couldn't be read\n\t * @throws IOException\n\t */\npublic void init() {\n    try {\n        // Current enterprise init\n        currentEnterprise = new  EnterpriseModel();\n        applicationManager = server.getParameters().get(PARAM_APPLICATION_MANAGER);\n        if (StringUtils.isBlank(applicationManager)) {\n            applicationManager = UIAUTOMATION_NAME;\n        }\n        server.debug(\"Robot initialized\");\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error initializing\");\n    }\n}"},{"id":"assignQueue","implementation":"/**\n\t * Select queue.\n\t *\n\t * @throws IOException          Signals that an I/O exception has occurred.\n\t * @throws JidokaQueueException the jidoka queue exception\n\t * @throws JidokaException\n\t */\npublic void assignQueue() throws JidokaQueueException {\n    try {\n        queueItemsManager.assignQueue();\n        server.setNumberOfItems(queueItemsManager.getCurrentQueue().pendingItems());\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error creating the queue\", e);\n    }\n}"},{"id":"updateItemQueue","implementation":"/**\n\t * Update item queue. With the information extracted from the web\n\t *\n\t * @throws JidokaQueueException         the Jidoka queue exception\n\t * @throws UnsupportedEncodingException\n\t */\npublic void updateItemQueue() throws JidokaQueueException {\n    logFunctionalData();\n    queueItemsManager.saveItem(currentEnterprise);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Browser.\n\t *\n\t * @throws Exception the exception\n\t */\npublic void openBrowser() {\n    try {\n        browserManager.openBrowser();\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error opening the browser\");\n    }\n}"},{"id":"findCompany","implementation":"/**\n\t * Find company match with SYMBOL.\n\t *\n\t * @throws EnterpriseNotFoundException the company not found exception\n\t */\npublic void findCompany() {\n    try {\n        nasdaqWebManager.findCompany(currentEnterprise.getSymbols());\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error finding the company\");\n    }\n}"},{"id":"getData","implementation":"/**\n\t * Get data.\n\t *\n\t * @return the data\n\t * @throws Exception the exception\n\t */\npublic void getData() {\n    try {\n        currentEnterprise.setSymbols(currentEnterprise.getSymbols());\n        nasdaqWebManager.getData(currentEnterprise);\n    } catch (Exception e) {\n        throw new  JidokaItemException(e.getMessage());\n    }\n}"},{"id":"closeQueue","implementation":"/**\n\t * Close queue action\n\t *\n\t * @return the string\n\t * @throws IOException          Signals that an I/O exception has occurred.\n\t * @throws JidokaQueueException the jidoka queue exception\n\t */\npublic void closeQueue() {\n    try {\n        // First we reserve the queue (other robots can't reserve the queue at the same\n        queueItemsManager.closeQueue(EQueueResultTarget.EXCEL);\n    } catch (JidokaQueueException e) {\n        server.info(\"Error closing the queue and updating the output file\");\n    }\n}"},{"id":"startApplication","implementation":"/**\n\t * Init application\n\t */\npublic void startApplication() {\n    try {\n        stockApplicationManager.startApplication();\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error starting the application\");\n    }\n}"},{"id":"newCompany","implementation":"/**\n\t * New company\n\t * \n\t */\npublic void newCompany() {\n    try {\n        if (applicationManager.equals(FALCON_NAME)) {\n            falconManager.newCompany();\n        } else if (applicationManager.equals(UIAUTOMATION_NAME)) {\n            stockApplicationManager.newCompany();\n        } else {\n            throw new  JidokaFatalException(\"None application manager selected\");\n        }\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error creating a new company\");\n    }\n}"},{"id":"fillFields","implementation":"/**\n\t * Fill fields\n\t * \n\t * @throws AutomationException\n\t */\npublic void fillFields() {\n    try {\n        if (applicationManager.equals(FALCON_NAME)) {\n            falconManager.fillFields(currentEnterprise);\n        } else if (applicationManager.equals(UIAUTOMATION_NAME)) {\n            stockApplicationManager.fillFields(currentEnterprise);\n        } else {\n            throw new  JidokaFatalException(\"None application manager selected\");\n        }\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error filling the application fields\");\n    }\n}"},{"id":"clickButtons","implementation":"/**\n\t * Click buttons\n\t * \n\t * @throws AutomationException\n\t * @throws JidokaUnsatisfiedConditionException\n\t */\npublic void clickButtons() {\n    try {\n        if (applicationManager.equals(FALCON_NAME)) {\n            falconManager.clickSaveButton();\n        } else if (applicationManager.equals(UIAUTOMATION_NAME)) {\n            stockApplicationManager.clickSaveButton();\n        } else {\n            throw new  JidokaFatalException(\"None application manager selected\");\n        }\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error clicking the application buttons\");\n    }\n}"},{"id":"end","implementation":"/**\n\t * Action 'End'.\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"@SuppressWarnings(\"unchecked\")\n@Override\npublic boolean startUp() throws Exception {\n    // Get an instance of IJidokaServer to communicate with the server\n    server = (IJidokaServer<Serializable>) JidokaFactory.getServer();\n    // BrowserManager init\n    browserManager = new  BrowserManager(this, EBrowsers.CHROME);\n    // NadasqWebManager init\n    nasdaqWebManager = new  NasdaqWebManager(browserManager);\n    // QueueItemsManager init\n    queueItemsManager = new  QueueItemsManager(this, new  EnterpriseMappedSearch());\n    // StockApplicationManager init\n    stockApplicationManager = new  StockApplicationManager(this);\n    // FalconManager init\n    falconManager = new  FalconManager(this);\n    return true;\n}"},{"id":"hasMoreItems","implementation":"/**\n\t * Checks for more items.\n\t *\n\t * @return the string\n\t * @throws Exception the exception\n\t */\npublic String hasMoreItems() {\n    try {\n        // retrieve the next item in the queue\n        currentEnterprise = queueItemsManager.getNextItem();\n        if (currentEnterprise != null) {\n            // set the stats for the current item\n            currentItemIndex++;\n            server.setCurrentItem(currentItemIndex, currentEnterprise.getSymbols());\n            return \"yes\";\n        }\n        return \"no\";\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Not possible to evaluate item\", e);\n    }\n}"}],"sdkMethods":[]}