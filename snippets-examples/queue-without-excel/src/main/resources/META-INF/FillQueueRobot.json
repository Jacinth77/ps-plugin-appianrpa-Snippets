{"id":"FillQueueRobot","robotType":"ROBOT","mainClass":"com.appian.snippets.examples.FillQueueRobot","actions":["init","checkIfQueueExists","addNewItems","end"],"conditionalActions":["startUp","hasNewItemsToAdd"],"fieldLinks":[],"actionDetails":[{"id":"init","implementation":"/**\n\t * Inits the robot variables\n\t */\npublic void init() {\n    // Inits the queue name\n    this.queueName = getQueueName();\n}"},{"id":"checkIfQueueExists","implementation":"/**\n\t * Creates the queue if it doesn't exist. If it exists, the queue is only\n\t * assigned.\n\t * \n\t * @return A list with the pending files\n\t */\npublic void checkIfQueueExists() {\n    try {\n        genericQueueManager = GenericQueueManager.assignExistingQueue(FileModel.class, this.queueName);\n        if (genericQueueManager == null) {\n            genericQueueManager = GenericQueueManager.createAndAssingNewQueue(FileModel.class, this.queueName);\n        }\n    } catch (JidokaQueueException e) {\n        throw new  JidokaFatalException(\"Error creating/getting the queue\", e);\n    }\n}"},{"id":"addNewItems","implementation":"/**\n\t * Adds the new files to the queue.\n\t */\npublic void addNewItems() {\n    for (File file : filesToAdd) {\n        try {\n            genericQueueManager.addItem(new  FileModel(file));\n        } catch (JidokaQueueException e) {\n            throw new  JidokaItemException(\"Error adding the file \" + FilenameUtils.getBaseName(file.getName()));\n        }\n    }\n}"},{"id":"end","implementation":"/**\n\t * End action\n\t */\npublic void end() {\n    server.info(\"No more files to add to the queue\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"@Override\npublic boolean startUp() throws Exception {\n    // Init modules and managers\n    server = JidokaFactory.getServer();\n    return IRobot.super.startUp();\n}"},{"id":"hasNewItemsToAdd","implementation":"/**\n\t * Checks if there are new files to add to the queue. If there are new files, it\n\t * adds the files to the queue.\n\t * \n\t * @return If there are new files to add.\n\t */\npublic String hasNewItemsToAdd() {\n    Integer itemsPerRobot = EEnvironmentVariables.ITEMS_PER_ROBOT.getEnvironmentVariable().getAsInteger();\n    int addedRobots = 0;\n    filesToAdd = new  ArrayList();\n    for (File file : getFilesList()) {\n        if (pendingOfProcess(file)) {\n            filesToAdd.add(file);\n            addedRobots++;\n            if (addedRobots >= itemsPerRobot) {\n                server.registerEvent(\"LAUNCH_CONSUMER_ROBOT\");\n                addedRobots = 0;\n            }\n        }\n    }\n    if (addedRobots > 0) {\n        server.registerEvent(\"LAUNCH_CONSUMER_ROBOT\");\n    }\n    if (filesToAdd.isEmpty()) {\n        server.info(\"No new files to add to the queue\");\n        return \"no\";\n    } else {\n        server.info(filesToAdd.size() + \" new files to add to the queue\");\n        return \"yes\";\n    }\n}"}],"sdkMethods":[]}