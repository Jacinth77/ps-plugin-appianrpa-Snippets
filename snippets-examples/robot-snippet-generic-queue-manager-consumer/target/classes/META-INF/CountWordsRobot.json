{"id":"CountWordsRobot","robotType":"ROBOT","mainClass":"com.appian.rpa.snippets.examples.queuemanager.CountWordsRobot","actions":["init","countWords","updateQueueItem","end"],"conditionalActions":["startUp","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"init","implementation":"/**\n\t * Inits the robot variables\n\t */\npublic void init() {\n    try {\n        // Inits global variables\n        currentFile = new  FileModel();\n        // Gets the queue to process\n        genericQueueManager = GenericQueueManager.assignExistingQueue(currentFile.getClass(), getQueueName());\n        if (genericQueueManager == null) {\n            throw new  JidokaFatalException(\"Queue \" + getQueueName() + \" not found\");\n        }\n    } catch (Exception e) {\n        throw new  JidokaFatalException(e.getMessage(), e);\n    }\n}"},{"id":"countWords","implementation":"/**\n\t * Counts the words of the current {@link FileModel} object\n\t */\npublic void countWords() {\n    try {\n        String content = currentFile.getFileContent();\n        if (StringUtils.isBlank(content)) {\n            currentFile.setNumOfWords(0);\n        }\n        String[] words = content.split(\"\\\\s+\");\n        currentFile.setNumOfWords(words.length);\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error counting the words of item \" + currentFile.getFileName());\n    }\n}"},{"id":"updateQueueItem","implementation":"/**\n\t * Updates the current item functional data\n\t */\npublic void updateQueueItem() {\n    server.setCurrentItemResultToOK(\"Num of words: \" + currentFile.getNumOfWords());\n    genericQueueManager.updateItem(currentFile);\n}"},{"id":"end","implementation":"/**\n\t * End action\n\t */\npublic void end() {\n    server.info(\"No more items to process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"@Override\npublic boolean startUp() throws Exception {\n    // Inits modules and managers\n    server = JidokaFactory.getServer();\n    return IRobot.super.startUp();\n}"},{"id":"hasMoreItems","implementation":"/**\n\t * Checks for more items.\n\t *\n\t * @return the string\n\t * @throws Exception the exception\n\t */\npublic String hasMoreItems() {\n    try {\n        // retrieve the next item in the queue\n        currentFile = genericQueueManager.getNextItem();\n        if (currentFile != null) {\n            // set the stats for the current item\n            currentItemIndex++;\n            server.setNumberOfItems(currentItemIndex);\n            server.setCurrentItem(currentItemIndex, currentFile.getFileName());\n            return \"yes\";\n        }\n        return \"no\";\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Not possible to evaluate item\", e);\n    }\n}"}],"sdkMethods":[]}