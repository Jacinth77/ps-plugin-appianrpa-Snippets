{"id":"FTPRobot","robotType":"ROBOT","mainClass":"com.appian.rpa.snippets.examples.ftp.FTPRobot","actions":["start","getAllFilesInRoot","uploadSupportFiles","downloadFiles","deleteFiles","end"],"conditionalActions":["startUp"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * The start method initializes modules and global variables\n\t */\npublic void start() {\n    // All files to work with\n    supportFiles = server.getSupportFiles().stream().map(Path::toFile).collect(Collectors.toList());\n    String ftpUser = server.getParameters().get(PARAM_FTP_USER);\n    ftpCredentials = credentialsUtils.getCredentialsByUser(APPLICATION_NAME, ftpUser, false, 30);\n    // Initializing the FTP client. The default directory to connect is root but you\n    // can choose a different one that exists in the FTP\n    rpaFtpClient.init(server.getParameters().get(PARAM_HOST), ftpCredentials.getUsername(), ftpCredentials.getPassword());\n}"},{"id":"getAllFilesInRoot","implementation":"/**\n\t * This method retrieves all files in the FTP root directory.\n\t */\npublic void getAllFilesInRoot() {\n    // Here we obtain all the files name in the active directory (root)\n    // If you want to scrap a different directory you need to change the active one\n    // before\n    // using rpaFtpClient.setWorkingDirectory(\"new/directory\");\n    List<String> arrayFtpFiles = rpaFtpClient.getAllFilesName();\n    arrayFtpFiles.stream().forEach( f->server.debug(f));\n}"},{"id":"uploadSupportFiles","implementation":"/**\n\t * This method upload all files in the console support folders linked to the\n\t * robot.\n\t */\npublic void uploadSupportFiles() {\n    // First we are going to create a new directory in the FTP\n    if (!rpaFtpClient.mkDirFtp(FTP_TEST_DIR)) {\n        throw new  JidokaFatalException(\"Error creating a new directory in the FTP\");\n    }\n    // Now we select that directory to work with it\n    rpaFtpClient.setWorkingDirectory(FTP_TEST_DIR);\n    boolean uploadComplete = rpaFtpClient.uploadFiles(supportFiles);\n    server.debug(\"Upload complete: \" + uploadComplete);\n    if (!uploadComplete) {\n        throw new  JidokaFatalException(\"There is a problem uploading files to the FTP\");\n    }\n    // We are going to check the upload. The method 'getAllFilesName' search in the\n    // current working directory.\n    List<String> arrayFtpFiles = rpaFtpClient.getAllFilesName();\n    arrayFtpFiles.stream().forEach( f->server.debug(f));\n}"},{"id":"downloadFiles","implementation":"/**\n\t * Download all files in the current FTP working directory to a specific folder\n\t * in the resource.\n\t */\npublic void downloadFiles() {\n    // We are setting the directory to download files, by default is the robot\n    // directory in the resource\n    rpaFtpClient.setDownloadDirectory(System.getProperty(\"user.dir\") + File.separator + \"ftpDownloadTest\");\n    List<String> arrayFtpFiles = rpaFtpClient.getAllFilesName();\n    List<File> localFiles = rpaFtpClient.downloadFiles(arrayFtpFiles);\n    localFiles.stream().forEach( f->server.debug(f));\n}"},{"id":"deleteFiles","implementation":"/**\n\t * Delete the files previously uploaded.\n\t */\npublic void deleteFiles() {\n    List<String> arrayFtpFiles = rpaFtpClient.getAllFilesName();\n    if (arrayFtpFiles.isEmpty()) {\n        throw new  JidokaFatalException(\"There is no files to delete in the FTP directory.\");\n    }\n    // We can delete only a selected file\n    boolean fileDelete = rpaFtpClient.deleteFile(arrayFtpFiles.get(0));\n    server.debug(\"Single delete result: \" + arrayFtpFiles.get(0) + \" delete: \" + fileDelete);\n    // Now we are going to delete the complete directory. We set the boolean\n    // parameter to true to force the deletion even if you have files in it.\n    rpaFtpClient.rmDirFtp(FTP_TEST_DIR, true);\n}"},{"id":"end","implementation":"/**\n\t * Any further actions to close the robot process can be performed here.\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Overrides the startup method to initialize some variables involved in our\n\t * process.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    // Initialize server module\n    server = JidokaFactory.getServer();\n    credentialsUtils = CredentialsUtils.getInstance();\n    rpaFtpClient = RpaFtpClient.getInstance();\n    return true;\n}"}],"sdkMethods":[]}