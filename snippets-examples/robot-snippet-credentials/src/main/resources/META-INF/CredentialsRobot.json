{"id":"CredentialsRobot","robotType":"ROBOT","mainClass":"com.appian.rpa.snippets.examples.credentials.CredentialsRobot","actions":["start","retrieveCredentialsFromConsole","doActions","closeApp","end"],"conditionalActions":["startUp","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * The start method initializes modules and global variables\n\t */\npublic void start() {\n    server.setNumberOfItems(NUMBER_OF_LOOPS);\n}"},{"id":"retrieveCredentialsFromConsole","implementation":"/**\n\t * This method retrieves the three credentials associated to the same TEST_ROBOT\n\t * application, whether the number of usages is limited or not. A\n\t * JidokaFatalException is thrown in case that the number of retrievals was\n\t * already exceeded or simply the desired credential does not exist.\n\t */\npublic void retrieveCredentialsFromConsole() {\n    try {\n        // First, reserves or gets the credentials needed. In this case, we are going to\n        // get/reserve 3 credentials.\n        // Gets the first credentials and reserve it, getting the first listed one\n        credentials1 = credentialsUtils.getCredentials(APPLICATION_NAME, true, ECredentialSearch.FIRST_LISTED, DEFAULT_TIMEOUT);\n        // Then it gets the second credentials, searching them by user without reserving\n        // it\n        credentials2 = credentialsUtils.getCredentialsByUser(APPLICATION_NAME, \"test2\", false, DEFAULT_TIMEOUT);\n        // Finally it gets the third credentials, searching them by user and reserving\n        // it\n        // Then it gets the second credentials, searching them by user without reserving\n        // it\n        credentials3 = credentialsUtils.getCredentialsByUser(APPLICATION_NAME, \"test3\", true, DEFAULT_TIMEOUT);\n        // Here we should do the required login actions on the app\n        // As this is a blank robot, we are going to show the credentials in the log.\n        server.info(String.format(\"Using the credentials 1 with USER: %s and PASSWORD: %s\", credentials1.getUsername(), credentials1.getPassword()));\n        server.info(String.format(\"Using the credentials 2 with USER: %s and PASSWORD: %s\", credentials2.getUsername(), credentials2.getPassword()));\n        server.info(String.format(\"Using the credentials 3 with USER: %s and PASSWORD: %s\", credentials3.getUsername(), credentials3.getPassword()));\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error logging into the app\", e);\n    }\n}"},{"id":"doActions","implementation":"/**\n\t * This method let the process confirm if each credential was successfully\n\t * retrieved or not.\n\t */\npublic void doActions() {\n    try {\n        // In this loop, we must put the main actions on the app\n        server.info(\"Processing Action\" + currentItemIndex);\n        server.setCurrentItemResultToOK();\n    } catch (Exception e) {\n        throw new  JidokaItemException(\"Error performing the actions\");\n    }\n}"},{"id":"closeApp","implementation":"/**\n\t * Close the app and release the used credentials\n\t */\npublic void closeApp() {\n    try {\n        // It closes the app and releases the credentials if were reserved. We are going\n        // to release the credentials1 and then release the others on the cleanUp\n        credentialsUtils.releaseCredentials(APPLICATION_NAME, credentials1.getUsername());\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Error closing the app\", e);\n    }\n}"},{"id":"end","implementation":"/**\n\t * Any further actions to close the robot process can be performed here.\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Overrides the startup method to initialize some variables involved in our\n\t * process.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    // Init server module\n    server = JidokaFactory.getServer();\n    credentialsUtils = new  CredentialsUtils();\n    return true;\n}"},{"id":"hasMoreItems","implementation":"/**\n\t * Checks if there are more pending items\n\t */\npublic String hasMoreItems() {\n    try {\n        if (currentItemIndex < NUMBER_OF_LOOPS) {\n            // set the stats for the current item\n            currentItemIndex++;\n            server.setCurrentItem(currentItemIndex, \"Action\" + currentItemIndex);\n            return \"yes\";\n        }\n        return \"no\";\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Not possible to evaluate item\", e);\n    }\n}"}],"sdkMethods":[]}